** step01 -> step02의 변경사항
1. Theater 클래스의 enter 메서드를 변경함.
    결합도를 낮추고, 자율성을 높이기 위해서 Theater은 TicketSeller에게 "관람객에게 티켓을 판매해"라는 메시지를 송신한다.
    TicketSeller는 "관람객에게 티켓을 판매해"라는 메시지를 수신하고, sellTo 메서드를 통해서 응답한다.
    이 과정을 통해서 TicketSeller의 내부 구현을 "캡슐화"가 가능해지며 자율성을 확보할 수 있었다.

2. Theater로부터 TicketSeller는 자율성을 확보했지만, audience는 TicketSeller에 의해서 수동적인 존재로 변경되었다.
    이 부분도 분리해주기 위해 ticketSeller는 "티켓을 구매해"라는 메시지를 송신한다.
    Audienece는 "티켓을 구매해"라는 메시지를 수신하고, buy(Ticket ticket) 메서드를 통해서 응답한다.
    이 과정을 통해서 TicketSeller는 Audience가 구매하는 과정에 대해서는 알 수 없게 되며, Audience는 자율성을 확보할 수 있어진다.
    Audience는 가방을 통해서 구입을 하던, 신용카드로 구매하던 상관이 없어진다.


=> 이런 결과를 통해서 얻은 것은 무엇인가?
TicketSeller가 티켓을 판매하는 방법이 어떻던 관계없이 Theater 클래스를 변경할 필요가 없어졌다.
Audience가 입장권을 구매하는 방법이 티켓이건, 현금이건, 신용카드건, 추가적으로 변경이 일어나더라도 TicketSeller,Theater가 변경될 필요가 없어졌다.

내부의 구현를 감추게되면서 결합도가 낮아졌고, 코드를 변경하는데 연계적으로 수정되는 코드들을 줄일 수 있었다.


=====================================================================================
핵심은 객체 내부의 상태를 캡슐화하고 객체 간에 오직 메시지를 통해서만 상호작용하도록 만드는 것이다.
밀접하게 연관된 작업만을 수행하고 연관성 없는 작업은 다른 객체에게 위임하는 객체를 가리켜 "응집도"가 높다고 말한다.
객체의 "응집도"를 높이기 위해서는 객체 스스로 자신의 데이터를 책임져야 한다.

데이터와 데이터를 사용하는 프로세스가 동일한 객체 안에 위치한다면 객체지향 프로그래밍 밧기을 따르고 있을 확률이 높다.
객체지향은 단순히 데이터와 프로세스를 하나의 객체안을 모으는 것 이상의 무언가가 존재한다.
핵심은 적절한 객체에 적절한 책임을 할당하는 것이다.
객체는 다른 객체와의 협력이라는 문맥 안에서 특정한 역할을 수행하는 데 필요한 적절한 책임을 수행해야 한다.

